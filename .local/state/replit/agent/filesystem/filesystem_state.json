{"file_contents":{"replit.md":{"content":"# SM Furnishing Products API\n\n## Project Overview\nThis is a Node.js Express API backend for managing products and categories. It connects to MongoDB for data storage and provides REST endpoints for product operations.\n\n## Setup Status\n- ✅ Dependencies installed (Express, MongoDB, CORS, Nodemon)\n- ✅ Server configured for Replit environment (0.0.0.0:5000)\n- ✅ Workflow configured for development server\n- ⏳ MongoDB connection string needed\n\n## API Endpoints\n- `GET /` - API information and available endpoints\n- `GET /health` - Health check and database status\n- `GET /api/products` - Get all products\n- `POST /api/products` - Create new product\n- `GET /api/products/:id` - Get single product by ID\n- `DELETE /api/products/:id` - Delete product by ID\n- `GET /api/categories` - Get all categories\n\n## Required Environment Variables\n- `MONGODB_URI` - MongoDB connection string (needed to start server)\n\n## Database Schema\n- Database: `smFurnishing`\n- Collections: `products`, `categories`\n- Product fields: name, description, price, stock, categoryId, createdAt, updatedAt\n\n## Recent Changes\n- 2025-09-18: Configured server to bind to 0.0.0.0:5000 for Replit environment\n- 2025-09-18: Set up development workflow with nodemon","size_bytes":1231},"server.js":{"content":"require('dotenv').config();\nconst express = require('express');\nconst { MongoClient, ObjectId } = require('mongodb');\nconst cors = require('cors');\n\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// MongoDB connection\nconst uri = process.env.MONGODB_URI;\nconst client = new MongoClient(uri);\n\nlet db;\nlet productsCollection;\nlet categoriesCollection;\n\n// Connect to MongoDB\nasync function connectToMongoDB() {\n  try {\n    await client.connect();\n    console.log('✅ Connected to MongoDB Atlas');\n    \n    // Connect to the database and collections\n    db = client.db('smFurnishing');\n    productsCollection = db.collection('products');\n    categoriesCollection = db.collection('categories');\n    \n    // Verify connection by counting documents\n    const count = await productsCollection.countDocuments();\n    console.log(`📦 Found ${count} products in the database`);\n    \n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error);\n    process.exit(1);\n  }\n}\n\n// GET /api/products - Fetch all products\napp.get('/api/products', async (req, res) => {\n  try {\n    // Fetch all products from the collection\n    const products = await productsCollection.find({}).toArray();\n    \n    // Send successful response\n    res.status(200).json({\n      success: true,\n      count: products.length,\n      data: products\n    });\n    \n  } catch (error) {\n    console.error('Error fetching products:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error fetching products',\n      error: error.message\n    });\n  }\n});\n\n// POST /api/products - Add a new product\napp.post('/api/products', async (req, res) => {\n  try {\n    const { categoryId, name, description, price, stock } = req.body;\n    \n    // Validation\n    if (!name || !description || !price) {\n      return res.status(400).json({\n        success: false,\n        message: 'Name, description, and price are required fields'\n      });\n    }\n    \n    // Validate price is a positive number\n    if (typeof price !== 'number' || price <= 0) {\n      return res.status(400).json({\n        success: false,\n        message: 'Price must be a positive number'\n      });\n    }\n    \n    // Validate stock if provided\n    if (stock !== undefined && (typeof stock !== 'number' || stock < 0)) {\n      return res.status(400).json({\n        success: false,\n        message: 'Stock must be a non-negative number'\n      });\n    }\n    \n    // If categoryId is provided, validate it exists (optional)\n    if (categoryId) {\n      try {\n        const categoryExists = await categoriesCollection.findOne({ \n          _id: new ObjectId(categoryId) \n        });\n        \n        if (!categoryExists) {\n          return res.status(400).json({\n            success: false,\n            message: 'Invalid category ID'\n          });\n        }\n      } catch (error) {\n        // If categoryId is not a valid ObjectId format\n        return res.status(400).json({\n          success: false,\n          message: 'Invalid category ID format'\n        });\n      }\n    }\n    \n    // Create new product object\n    const newProduct = {\n      categoryId: categoryId || null,\n      name: name.trim(),\n      description: description.trim(),\n      price: Number(price),\n      stock: stock !== undefined ? Number(stock) : 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    // Insert the product into database\n    const result = await productsCollection.insertOne(newProduct);\n    \n    // Get the inserted product\n    const insertedProduct = await productsCollection.findOne({ \n      _id: result.insertedId \n    });\n    \n    // Send success response\n    res.status(201).json({\n      success: true,\n      message: 'Product created successfully',\n      data: insertedProduct\n    });\n    \n    console.log(`✅ New product added: ${name}`);\n    \n  } catch (error) {\n    console.error('Error creating product:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error creating product',\n      error: error.message\n    });\n  }\n});\n\n// GET /api/products/:id - Get single product by ID\napp.get('/api/products/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Validate ID format\n    if (!ObjectId.isValid(id)) {\n      return res.status(400).json({\n        success: false,\n        message: 'Invalid product ID format'\n      });\n    }\n    \n    const product = await productsCollection.findOne({ \n      _id: new ObjectId(id) \n    });\n    \n    if (!product) {\n      return res.status(404).json({\n        success: false,\n        message: 'Product not found'\n      });\n    }\n    \n    res.status(200).json({\n      success: true,\n      data: product\n    });\n    \n  } catch (error) {\n    console.error('Error fetching product:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error fetching product',\n      error: error.message\n    });\n  }\n});\n\n// DELETE /api/products/:id - Delete a product\napp.delete('/api/products/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    // Validate ID format\n    if (!ObjectId.isValid(id)) {\n      return res.status(400).json({\n        success: false,\n        message: 'Invalid product ID format'\n      });\n    }\n    \n    const result = await productsCollection.deleteOne({ \n      _id: new ObjectId(id) \n    });\n    \n    if (result.deletedCount === 0) {\n      return res.status(404).json({\n        success: false,\n        message: 'Product not found'\n      });\n    }\n    \n    res.status(200).json({\n      success: true,\n      message: 'Product deleted successfully'\n    });\n    \n    console.log(`🗑️ Product deleted: ${id}`);\n    \n  } catch (error) {\n    console.error('Error deleting product:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error deleting product',\n      error: error.message\n    });\n  }\n});\n\n// GET /api/categories - Get all categories\napp.get('/api/categories', async (req, res) => {\n  try {\n    const categories = await categoriesCollection.find({}).toArray();\n    \n    res.status(200).json({\n      success: true,\n      count: categories.length,\n      data: categories\n    });\n    \n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Error fetching categories',\n      error: error.message\n    });\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.status(200).json({ \n    status: 'OK',\n    message: 'Server is running',\n    database: db ? 'Connected' : 'Disconnected'\n  });\n});\n\n// Root endpoint\napp.get('/', (req, res) => {\n  res.json({ \n    message: 'SM Furnishing Products API',\n    endpoints: {\n      'GET /api/products': 'Get all products',\n      'POST /api/products': 'Create new product',\n      'GET /api/products/:id': 'Get single product',\n      'DELETE /api/products/:id': 'Delete product',\n      'GET /api/categories': 'Get all categories',\n      'GET /health': 'Health check'\n    }\n  });\n});\n\n// Start server\nconst PORT = process.env.PORT || 5000;\n\nasync function startServer() {\n  await connectToMongoDB();\n  \n  app.listen(PORT, '0.0.0.0', () => {\n    console.log(`🚀 Server is running on http://0.0.0.0:${PORT}`);\n    console.log(`📍 Products endpoint: http://0.0.0.0:${PORT}/api/products`);\n    console.log(`➕ Add product: POST http://0.0.0.0:${PORT}/api/products`);\n  });\n}\n\nstartServer();\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.log('\\n🔄 Closing MongoDB connection...');\n  await client.close();\n  console.log('👋 Server shutdown complete');\n  process.exit(0);\n});","size_bytes":7597}},"version":1}